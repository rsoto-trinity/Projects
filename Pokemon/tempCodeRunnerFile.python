def create_board():
    return [[0] * 7 for _ in range(6)]
def print_board(board):
    for row in board:
        print(' '.join(str(cell) for cell in row))
    print()
def drop_disc(board, column, player):
    for row in reversed(board):
        if row[column] == 0:
            row[column] = player
            return
def check_win(board, player):
    # Check horizontal, vertical, and diagonal lines
    for row in range(6):
        for col in range(7):
            if (check_direction(board, row, col, 1, 0, player) or  # Horizontal
                check_direction(board, row, col, 0, 1, player) or  # Vertical
                check_direction(board, row, col, 1, 1, player) or  # Diagonal /
                check_direction(board, row, col, 1, -1, player)):  # Diagonal \
                return True
    return False
def check_direction(board, row, col, delta_row, delta_col, player):
    count = 0
    for i in range(4):
        r, c = row + i * delta_row, col + i * delta_col
        if 0 <= r < 6 and 0 <= c < 7 and board[r][c] == player:
            count += 1
        else:
            break
    return count == 4
def is_draw(board):
    return all(board[0][col] != 0 for col in range(7))
def get_human_move():
    return int(input("Choose a column (0-6): "))
import random

def get_ai_move(board):
    return random.choice([col for col in range(7) if board[0][col] == 0])
def play_game():
    board = create_board()
    player_turn = 1  # 1 for human, 2 for AI

    while True:
        print_board(board)
        if player_turn == 1:
            column = get_human_move()
        else:
            column = get_ai_move(board)

        drop_disc(board, column, player_turn)
        if check_win(board, player_turn):
            print_board(board)
            print(f"Player {player_turn} wins!")
            break
        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        player_turn = 3 - player_turn  # Switch players
